% Encoding: UTF-8

@article{Amazon,
  shorttitle = {{{AMZ}}},
  author     = {Newcombe, Chris and Rath, Tim and Zhang, Fan and Munteanu, Bogdan and Brooker, Marc and Deardeuff, Michael},
  title      = {How Amazon web services uses formal methods},
  year       = {2015},
  issue_date = {April 2015},
  publisher  = {Association for Computing Machinery},
  address    = {New York, NY, USA},
  volume     = {58},
  number     = {4},
  issn       = {0001-0782},
  url        = {https://doi.org/10.1145/2699417},
  doi        = {10.1145/2699417},
  abstract   = {Engineers use TLA+ to prevent serious but subtle bugs from reaching production.},
  journal    = {Commun. ACM},
  month      = mar,
  pages      = {66–73},
  numpages   = {8},
  file       = {papers/Amazon.pdf}
}

@inproceedings{TAS,
  author    = {Resch, Stefan and Paulitsch, Michael},
  booktitle = {2017 IEEE International Symposium on Software Reliability Engineering Workshops (ISSREW)},
  title     = {Using TLA+ in the Development of a Safety-Critical Fault-Tolerant Middleware},
  year      = {2017},
  volume    = {},
  number    = {},
  pages     = {146-152},
  keywords  = {Fault tolerant systems;Algorithm design and analysis;Model checking;Redundancy;Middleware;TLA+;model checking;code generation},
  doi       = {10.1109/ISSREW.2017.43}
}

@inproceedings{Train,
  author    = {Salierno, Giulio and Morvillo, Sabatino and Leonardi, Letizia and Cabri, Giacomo},
  booktitle = {2020 IEEE 29th International Conference on Enabling Technologies: Infrastructure for Collaborative Enterprises (WETICE)},
  title     = {Specification and verification of railway safety-critical systems using TLA+: A Case Study},
  year      = {2020},
  volume    = {},
  number    = {},
  pages     = {207-212},
  keywords  = {Formal languages;Systems modeling;Rail transportation;Software;Safety;Mathematical model;Formal specifications;Railway software specification;Verification;Validation;Formal methods},
  doi       = {10.1109/WETICE49692.2020.00048}
}

@inproceedings{Aviation,
  author    = {Das, Madhusmita and Mohan, Biju R. and Guddeti, Ram Mohana Reddy and Dilshad, Mohd and Ahmed, Fahim and Zunja, Sudarshan and Minank, K P},
  booktitle = {2024 15th International Conference on Computing Communication and Networking Technologies (ICCCNT)},
  title     = {TLA+ Specification of Aviation System with Time Analysis},
  year      = {2024},
  volume    = {},
  number    = {},
  pages     = {1-6},
  keywords  = {Industries;Computational modeling;Petri nets;Software;Safety;Software reliability;Manufacturing;Logic;Formal specifications;Safety critical system;Petri Nets;Temporal Logic Of Actions (TLA+) tool;TLC Model Checker},
  doi       = {10.1109/ICCCNT61001.2024.10725489}
}

@misc{FindFacts,
  shorttitle = {{{LCA}}},
  doi        = {10.48550/ARXIV.2204.14191},
  url        = {https://arxiv.org/abs/2204.14191},
  author     = {Huch,  Fabian and Krauss,  Alexander},
  keywords   = {Logic in Computer Science (cs.LO),  FOS: Computer and information sciences,  FOS: Computer and information sciences},
  title      = {FindFacts: A Scalable Theorem Search},
  publisher  = {arXiv},
  year       = {2022},
  copyright  = {Creative Commons Attribution 4.0 International}
}

@inproceedings{Merz1999AnEO,
  title  = {An Encoding of TLA in Isabelle},
  author = {Stephan Merz},
  year   = {1999},
  url    = {https://api.semanticscholar.org/CorpusID:10435651}
}

@article{Grov2011ADE,
  title   = {A Definitional Encoding of TLA* in Isabelle/HOL},
  author  = {Gudmund Grov and Stephan Merz},
  journal = {Arch. Formal Proofs},
  year    = {2011},
  volume  = {2011},
  url     = {https://api.semanticscholar.org/CorpusID:7524763}
}

@preprint{CoqAutoCompletion,
  title  = {Expanding Coq With Type Aware Code Completion},
  author = {Hjalte Dalland, Jakob Israelsen, and Simon Kristensen},
  year   = {2023},
  url    = {https://github.com/Jakobis/vscoqComparison/blob/a181fe074cdca4ee0b13c2c71ab907bea73a5432/Expanding_Coq_with_Type_Aware_Code_Completion.pdf},
  file   = {papers/Expanding_Coq_with_Type_Aware_Code_Completion.pdf}
}

@inproceedings{CoqSearchByTypeInhabition,
  author    = {Czajka, {\L}ukasz},
  editor    = {Peltier, Nicolas
               and Sofronie-Stokkermans, Viorica},
  title     = {Practical Proof Search for Coq by Type Inhabitation},
  booktitle = {Automated Reasoning},
  year      = {2020},
  publisher = {Springer International Publishing},
  address   = {Cham},
  pages     = {28--57},
  abstract  = {We present a practical proof search procedure for Coq based on a direct search for type inhabitants in an appropriate normal form. The procedure is more general than any of the automation tactics natively available in Coq. It aims to handle as large a part of the Calculus of Inductive Constructions as practically feasible.},
  isbn      = {978-3-030-51054-1},
  file      = {papers/Practical Proof Search for Coq by Type Inhabitation.pdf}
}

@misc{TLAPS_LLM,
  title         = {Retrieval-Augmented TLAPS Proof Generation with Large Language Models},
  author        = {Yuhao Zhou},
  year          = {2025},
  eprint        = {2501.03073},
  archiveprefix = {arXiv},
  primaryclass  = {cs.LO},
  url           = {https://arxiv.org/abs/2501.03073},
  file          = {Retrieval-Augmented TLAPS Proof Generation with Large Language Models.pdf}
}

@article{Hammer,
  title     = {Hammer for Coq: Automation for dependent type theory},
  author    = {Czajka, {\L}ukasz and Kaliszyk, Cezary},
  journal   = {Journal of automated reasoning},
  volume    = {61},
  pages     = {423--453},
  year      = {2018},
  publisher = {Springer}
}

@article{TacTok,
  author     = {First, Emily and Brun, Yuriy and Guha, Arjun},
  title      = {TacTok: semantics-aware proof synthesis},
  year       = {2020},
  issue_date = {November 2020},
  publisher  = {Association for Computing Machinery},
  address    = {New York, NY, USA},
  volume     = {4},
  number     = {OOPSLA},
  url        = {https://doi.org/10.1145/3428299},
  doi        = {10.1145/3428299},
  abstract   = {Formally verifying software correctness is a highly manual process. However, because verification proof scripts often share structure, it is possible to learn from existing proof scripts to fully automate some formal verification. The goal of this paper is to improve proof script synthesis and enable fully automating more verification. Interactive theorem provers, such as the Coq proof assistant, allow programmers to write partial proof scripts, observe the semantics of the proof state thus far, and then attempt more progress. Knowing the proof state semantics is a significant aid. Recent research has shown that the proof state can help predict the next step. In this paper, we present TacTok, the first technique that attempts to fully automate proof script synthesis by modeling proof scripts using both the partial proof script written thus far and the semantics of the proof state. Thus, TacTok more completely models the information the programmer has access to when writing proof scripts manually. We evaluate TacTok on a benchmark of 26 software projects in Coq, consisting of over 10 thousand theorems. We compare our approach to five tools. Two prior techniques, CoqHammer, the state-of-the-art proof synthesis technique, and ASTactic, a proof script synthesis technique that models proof state. And three new proof script synthesis technique we create ourselves, SeqOnly, which models only the partial proof script and the initial theorem being proven, and WeightedRandom and WeightedGreedy, which use metaheuristic search biased by frequencies of proof tactics in existing, successful proof scripts. We find that TacTok outperforms WeightedRandom and WeightedGreedy, and is complementary to CoqHammer and ASTactic: for 24 out of the 26 projects, TacTok can synthesize proof scripts for some theorems the prior tools cannot. Together with TacTok, 11.5\% more theorems can be proven automatically than by CoqHammer alone, and 20.0\% than by ASTactic alone. Compared to a combination of CoqHammer and ASTactic, TacTok can prove an additional 3.6\% more theorems, proving 115 theorems no tool could previously prove. Overall, our experiments provide evidence that partial proof script and proof state semantics, together, provide useful information for proof script modeling, and that metaheuristic search is a promising direction for proof script synthesis. TacTok is open-source and we make public all our data and a replication package of our experiments.},
  journal    = {Proc. ACM Program. Lang.},
  month      = nov,
  articleno  = {231},
  numpages   = {31},
  keywords   = {proof script synthesis, formal software verification, automated proof script synthesis, Coq}
}

@article{IntroToCoq,
  title     = {Introduction to the calculus of inductive constructions},
  author    = {Paulin-Mohring, Christine},
  journal   = {All about Proofs, Proofs for All},
  volume    = {55},
  year      = {2015},
  publisher = {College Publications}
}

@article{EProver,
  title     = {E--a brainiac theorem prover},
  author    = {Schulz, Stephan},
  journal   = {Ai Communications},
  volume    = {15},
  number    = {2-3},
  pages     = {111--126},
  year      = {2002},
  publisher = {IOS Press},
  file      = {papers/E – a brainiac theorem prover.pdf}
}

@inproceedings{Proofster,
  title        = {Proofster: Automated formal verification},
  author       = {Agrawal, Arpan and First, Emily and Kaufman, Zhanna and Reichel, Tom and Zhang, Shizhuo and Zhou, Timothy and Sanchez-Stern, Alex and Ringer, Talia and Brun, Yuriy},
  booktitle    = {2023 IEEE/ACM 45th International Conference on Software Engineering: Companion Proceedings (ICSE-Companion)},
  pages        = {26--30},
  year         = {2023},
  organization = {IEEE},
  file         = {papers/PRoofster: Automated Formal Verification.pdf}
}